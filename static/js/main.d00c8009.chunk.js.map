{"version":3,"sources":["constants/index.js","components/Button/index.js","components/Search/index.js","components/Table/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["DEFAULT_QUERY","Button","_ref","onClick","_ref$className","className","children","react_default","a","createElement","type","Search","value","onChange","onSubmit","Table","list","onDismiss","map","item","key","objectID","style","width","href","url","title","created_at","author","num_comments","points","components_Button","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_isMounted","state","message","results","searchKey","searchTerm","error","needsToSearchTopStories","bind","assertThisInitialized","setSearchTopStories","fetchSearchTopStories","onSearchChange","onSearchSubmit","setState","result","hits","page","_this$state","oldHits","updatedHits","concat","toConsumableArray","objectSpread","defineProperty","_this2","PATH_BASE","arguments","length","undefined","console","log","axios","then","data","catch","event","target","preventDefault","id","_this$state2","_results$searchKey","filter","_this3","_this$state3","components_Search","components_Table","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d00c8009.chunk.js","sourcesContent":["//Define API Constant - Hacker News Search API\n\nexport const DEFAULT_QUERY = \"react\";\nexport const DEFAULT_HPP = \"25\";\nexport const DEFAULT_TAG = \"(story,poll)\";\n\nexport const PATH_BASE = \"https://hn.algolia.com/api/v1\";\nexport const PATH_SEARCH = \"/search_by_date\";\nexport const PARAM_SEARCH = \"query=\";\nexport const PARAM_TAG = \"tags=\";\nexport const PARAM_PAGE = \"page=\";\nexport const PARAM_HPP = \"hitsPerPage=\";\n","import React, { Component } from \"react\";\n\nconst Button = ({ onClick, className = \"\", children }) => {\n  return (\n    <button onClick={onClick} className={className} type=\"button\">\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\n\nconst Search = ({ value, onChange, onSubmit, children }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" value={value} onChange={onChange} />\n      <button type=\"submit\">{children}</button>\n    </form>\n  );\n};\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport Button from \"../Button\";\n\nconst Table = ({ list, onDismiss }) => {\n  return (\n    <div className=\"table\">\n      {list.map(item => (\n        <div key={item.objectID} className=\"table-row\">\n          <span style={{ width: \"55%\" }}>\n            <a href={item.url}>{item.title}</a>\n          </span>\n          <span style={{ width: \"20%\" }}>{item.created_at}</span>\n          <span style={{ width: \"10%\" }}>{item.author}</span>\n          <span style={{ width: \"5%\" }}>{item.num_comments}</span>\n          <span style={{ width: \"5%\" }}>{item.points}</span>\n          <span style={{ width: \"5%\" }}>\n            <Button\n              onClick={() => onDismiss(item.objectID)}\n              className=\"button-inline\"\n            >\n              Dismiss\n            </Button>\n          </span>\n          <hr />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Table;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./index.css\";\nimport {\n  DEFAULT_QUERY,\n  DEFAULT_TAG,\n  DEFAULT_HPP,\n  PATH_BASE,\n  PATH_SEARCH,\n  PARAM_SEARCH,\n  PARAM_TAG,\n  PARAM_PAGE,\n  PARAM_HPP\n} from \"../../constants\";\n\nimport Button from \"../Button\";\nimport Search from \"../Search\";\nimport Table from \"../Table\";\n\nclass App extends Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"Welcome to the Road to learn React!!\",\n      results: null,\n      searchKey: \"\",\n      searchTerm: DEFAULT_QUERY,\n      error: null\n    };\n\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  componentWillMount() {\n    this._isMounted = false;\n  }\n\n  needsToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm];\n  }\n\n  setSearchTopStories(result) {\n    const { hits, page } = result;\n    const { searchKey, results } = this.state;\n    const oldHits =\n      results && results[searchKey] ? results[searchKey].hits : [];\n    const updatedHits = [...oldHits, ...hits];\n    this.setState({\n      results: { ...results, [searchKey]: { hits: updatedHits, page } }\n    });\n  }\n\n  fetchSearchTopStories(searchTerm, page = 0) {\n    const url =\n      PATH_BASE +\n      PATH_SEARCH +\n      \"?\" +\n      PARAM_SEARCH +\n      searchTerm +\n      \"&\" +\n      PARAM_TAG +\n      DEFAULT_TAG +\n      \"&\" +\n      PARAM_PAGE +\n      page +\n      \"&\" +\n      PARAM_HPP +\n      DEFAULT_HPP;\n\n    console.log(url);\n\n    axios(url)\n      .then(result => this._isMounted && this.setSearchTopStories(result.data))\n      .catch(error => this._isMounted && this.setState({ error }));\n\n    // fetch(url)\n    //   .then(response => response.json())\n    //   .then(result => this.setSearchTopStories(result))\n    //   .catch(error => this.setState({ error }));\n  }\n\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n\n    event.preventDefault();\n  }\n\n  onDismiss(id) {\n    const { searchKey, results } = this.state;\n    const { hits, page } = results[searchKey];\n\n    const isNotId = item => item.objectID !== id;\n    const updatedHits = hits.filter(isNotId);\n    this.setState({\n      results: { ...results, [searchKey]: { hits: updatedHits, page } }\n    });\n  }\n\n  render() {\n    const { searchTerm, message, results, searchKey, error } = this.state;\n    const page =\n      (results && results[searchKey] && results[searchKey].page) || 0;\n    const list =\n      (results && results[searchKey] && results[searchKey].hits) || [];\n\n    return (\n      <div className=\"page\">\n        <h2>{message}</h2>\n\n        <div className=\"interactions\">\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}\n          >\n            Search\n          </Search>\n        </div>\n        {error ? (\n          <div className=\"interactions\">\n            <p>Something went wrong!</p>\n          </div>\n        ) : (\n          <Table list={list} onDismiss={this.onDismiss} />\n        )}\n\n        <div className=\"interactions\">\n          <Button\n            onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}\n          >\n            More ...\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// export { Button, Search, Table };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}